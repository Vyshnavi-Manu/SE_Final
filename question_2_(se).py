# -*- coding: utf-8 -*-
"""QUESTION-2 (SE)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lMaM0j910bSZuMph4dM6L9IlKOqQKa1H
"""

import pandas as pd
import matplotlib.pyplot as plt
import statsmodels.api as sm
import seaborn as sns
import json
import numpy as np
from scipy import stats
from sklearn.preprocessing import LabelEncoder

from google.colab import files
files.upload()

with open('20230831_073827_hn_sharings.json', 'r') as f:
    json_data = json.load(f)

from typing_extensions import final
sources = pd.DataFrame(json_data["Sources"])
gptvalues = sources['ChatgptSharing']
final = []


for row in range(len(gptvalues)):
  row_value = gptvalues.iloc[row][0]
  final.append(row_value)


final = pd.DataFrame(final)
conversations = final['Conversations']

topics = final['Title']
turns = final['NumberOfPrompts'].fillna(final['NumberOfPrompts'].mean())

# Calculate quartiles to dynamically set complexity thresholds
quartiles = turns.quantile([0, 0.25, 0.5, 0.75, 1.0])
low_complexity_threshold = quartiles[0.25]
medium_complexity_threshold = quartiles[0.75]

def calculate_complexity(num_prompts):
    if num_prompts <= low_complexity_threshold:
        return 'Low'
    elif num_prompts <= medium_complexity_threshold:
        return 'Medium'
    else:
        return 'High'

df = pd.DataFrame({'Topic': topics, 'NumberOfPrompts': turns})
df['Complexity'] = df['NumberOfPrompts'].apply(calculate_complexity)

mean_turns = df['NumberOfPrompts'].mean()
mode_turns = df['NumberOfPrompts'].mode().iloc[0]

print("mean:", mean_turns)
print("mode:", mode_turns)

# Set Hue Order for Seaborn
hue_order = ['Low', 'Medium', 'High']

# Plotting Boxplot
plt.figure(figsize=(10, 6))
sns.boxplot(x='Complexity', y='NumberOfPrompts', data=df, order=hue_order, palette='viridis')
plt.xlabel('Complexity Level')
plt.ylabel('Number of Prompts')
plt.title('Boxplot of Number of Prompts for Each Complexity Level')
plt.show()

complexity_counts = df['Complexity'].value_counts()

plt.figure(figsize=(8, 8))
plt.pie(complexity_counts, labels=complexity_counts.index, autopct='%1.1f%%', colors=sns.color_palette('viridis'), startangle=90)
plt.title('Distribution of Number of Prompts for Each Complexity Level')
plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(data=df, x='NumberOfPrompts', hue='Complexity', multiple='stack', palette='viridis', bins=20)
plt.xlabel('Number of Prompts')
plt.ylabel('Count')
plt.title('Distribution of Number of Prompts for Each Complexity Level')
plt.legend(title='Complexity', labels=['Low', 'Medium', 'High'])
plt.show()