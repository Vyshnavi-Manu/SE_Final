# -*- coding: utf-8 -*-
"""SE(Question3).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TtuUJJ-w_Zrf-yoyNnSOZtOn3drDKvTH
"""

import pandas as pd
import nltk
from nltk.sentiment import SentimentIntensityAnalyzer
import matplotlib.pyplot as plt
import seaborn as sns

# Load CSV data
df = pd.read_csv('/content/Result.csv')  # Replace with your file path

# Preprocess text data
nltk.download('vader_lexicon')
sia = SentimentIntensityAnalyzer()
df['prompt_sentiment'] = df['Prompt'].apply(lambda x: sia.polarity_scores(str(x))['compound'])
df['answer_sentiment'] = df['Answer'].apply(lambda x: sia.polarity_scores(str(x))['compound'])

# Function to categorize sentiment scores
def categorize_sentiment(score):
    if score > 0.05:
        return 'Positive'
    elif score < -0.05:
        return 'Negative'
    else:
        return 'Neutral'

# Apply categorization
df['prompt_sentiment_category'] = df['prompt_sentiment'].apply(categorize_sentiment)
df['answer_sentiment_category'] = df['answer_sentiment'].apply(categorize_sentiment)

# Correlation Analysis
correlation = df[['prompt_sentiment', 'answer_sentiment']].corr()
print("\nCorrelation between prompt sentiment and answer sentiment:\n", correlation)

# Create subplots
fig, axs = plt.subplots(2, 2, figsize=(12, 12))

# Scatterplot of Sentiment Scores
sns.scatterplot(ax=axs[0, 0], data=df, x='prompt_sentiment', y='answer_sentiment', hue='prompt_sentiment_category')
axs[0, 0].set_title('Prompt Sentiment vs Answer Sentiment')
axs[0, 0].set_xlabel('Prompt Sentiment Score')
axs[0, 0].set_ylabel('Answer Sentiment Score')

# Histogram for Distribution of Sentiment Scores
sns.histplot(ax=axs[0, 1], data=df, x='prompt_sentiment', color='blue', label='Prompt Sentiment', kde=True, binwidth=0.1)
sns.histplot(ax=axs[0, 1], data=df, x='answer_sentiment', color='orange', label='Answer Sentiment', kde=True, binwidth=0.1)
axs[0, 1].set_title('Distribution of Sentiment Scores')
axs[0, 1].set_xlabel('Sentiment Score')
axs[0, 1].legend()

# Countplot for Prompt Sentiment Categories
sns.countplot(ax=axs[1, 0], data=df, x='prompt_sentiment_category')
axs[1, 0].set_title('Distribution of Prompt Sentiment Categories')
axs[1, 0].set_xlabel('Prompt Sentiment Category')
axs[1, 0].set_ylabel('Count')

# Countplot for Answer Sentiment Categories
sns.countplot(ax=axs[1, 1], data=df, x='answer_sentiment_category')
axs[1, 1].set_title('Distribution of Answer Sentiment Categories')
axs[1, 1].set_xlabel('Answer Sentiment Category')
axs[1, 1].set_ylabel('Count')

plt.tight_layout()
plt.show()
